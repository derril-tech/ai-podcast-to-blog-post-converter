version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: echopress-postgres
    environment:
      POSTGRES_DB: echopress_ai
      POSTGRES_USER: echopress
      POSTGRES_PASSWORD: echopress_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echopress -d echopress_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echopress-network

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: echopress-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echopress-network

  # Backend API (FastAPI)
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: echopress-api
    environment:
      - DATABASE_URL=postgresql://echopress:echopress_password@postgres:5432/echopress_ai
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - echopress-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js)
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: echopress-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - echopress-network
    command: npm run dev

  # MinIO for local file storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: echopress-minio
    environment:
      MINIO_ROOT_USER: echopress
      MINIO_ROOT_PASSWORD: echopress_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - echopress-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: echopress-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - echopress-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: echopress-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - echopress-network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: echopress-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - echopress-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  echopress-network:
    driver: bridge
