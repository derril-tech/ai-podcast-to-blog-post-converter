name: EchoPress AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend CI
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
        
    - name: Install dependencies
      run: |
        npm ci
        cd apps/web && npm ci
        
    - name: Run linting
      run: |
        cd apps/web
        npm run lint
        
    - name: Run type checking
      run: |
        cd apps/web
        npm run type-check
        
    - name: Run tests
      run: |
        cd apps/web
        npm run test
        
    - name: Build application
      run: |
        cd apps/web
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/web/.next/
        retention-days: 1

  # Backend CI
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: echopress_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd apps/api
        pip install -r requirements.txt
        
    - name: Install Node.js for backend scripts
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/api/package-lock.json
        
    - name: Install Node.js dependencies
      run: |
        cd apps/api
        npm ci
        
    - name: Run linting
      run: |
        cd apps/api
        npm run lint
        
    - name: Run type checking
      run: |
        cd apps/api
        npm run type-check
        
    - name: Run tests
      run: |
        cd apps/api
        npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/echopress_test
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        
    - name: Run security checks
      run: |
        cd apps/api
        npm run security-check

  # E2E Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: echopress_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
        
    - name: Install dependencies
      run: |
        npm ci
        cd apps/web && npm ci
        
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: apps/web/.next/
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        cd apps/api
        pip install -r requirements.txt
        
    - name: Install Node.js for backend
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/api/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd apps/api
        npm ci
        
    - name: Start backend server
      run: |
        cd apps/api
        npm run dev &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/echopress_e2e
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        
    - name: Start frontend server
      run: |
        cd apps/web
        npm start &
        sleep 10
        
    - name: Run E2E tests
      run: |
        cd apps/web
        npm run test:e2e
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd apps/web && npm ci
        
    - name: Run Lighthouse CI
      run: |
        cd apps/web
        npm run lighthouse
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: apps/web/.lighthouseci/
        retention-days: 30

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e, security]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./apps/web
        
    - name: Deploy to Render (Backend)
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "do_not_clear"}'

  # Deploy to Production (on tags)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e, security]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./apps/web
        vercel-args: '--prod'
        
    - name: Deploy to Render (Backend)
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_PROD_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "do_not_clear"}'
